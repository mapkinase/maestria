library(tensorflow)
tf$constant("Hello Tensorflow!")
library(tensorflow)
setwd("C:/Users/Santi/OneDrive - ciencias.unam.mx/31_git/maestria/maestria/90_scripts/rueda_enriquecimiento")
# Importar librerias a utilizar
library(tidyverse)
datos_crudos <- read.csv(file = 'registro_por_hora.csv', header = TRUE) |>
head()
datos_crudos <- read.csv(file = 'registro_por_hora.csv', header = TRUE) |>
head()
datos_crudos |>
colnames()[1] <- "hora"
datos_crudos %>%
colnames()[1] <- "hora"
# Importar librerias a utilizar
library(tidyverse)
datos_crudos %>%
colnames()[1] <- "hora"
datos_crudos >%>
colnames(datos_crudos)[1] <- "hora" |> head(datos_crudos)
print(colnames(datos_crudos)[1] <- "hora" )
colnames(datos_crudos)[1] <- "hora"
head(datos_crudos)
colnames(datos_crudos)[1] <- "hora"
head(datos_crudos)
datos_crudos %>%
filter(!row_number() %in% c(1)) -> datos_limpios
head(datos_limpios) # revisar nuevos datos
convertir <- function(x){
x <- as.character(x)
x <-gsub(pattern = ":", replacement = ".",x = x, fixed = TRUE)
x <- as.numeric(x)
return(x)
}
datos_limpios$hora <- convertir(datos_limpios$hora)
head(datos_limpios)
datos_numericos <- as.data.frame(apply(datos_limpios, 2, as.numeric))
sapply(datos_numericos, class)
head(datos_numericos)
datos_por_dia <- datos_numericos %>%
group_by(x = cumsum(hora == 0)) %>%   # agrupa datos en función de los valores en la columna x (hora = 0)
mutate(y_group = X) %>%               # mutate crea nuevas columnas por cada grupo de valores y los rellena con los valores de Y (registro de rueda)
tidyr::pivot_wider(names_from = x, values_from = y_group)
head(datos_por_dia)
datos_por_dia <- datos_numericos %>%
group_by(x = cumsum(hora == 0)) %>%   # agrupa datos en función de los valores en la columna x (hora = 0)
mutate(y_group = X) %>%               # mutate crea nuevas columnas por cada grupo de valores y los rellena con los valores de Y (registro de rueda)
tidyr::pivot_wider(names_from = x, values_from = y_group)
head(datos_por_dia)
str(datos_por_dia)
# Importar librerias a utilizar
library(tidyverse)
datos_crudos <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
colnames(datos_crudos)[1] <- "hora"
head(datos_crudos)
datos_crudos %>%
filter(!row_number() %in% c(1)) -> datos_limpios
head(datos_limpios)
convertir <- function(x){
x <- as.character(x)
x <-gsub(pattern = ":", replacement = ".",x = x, fixed = TRUE)
x <- as.numeric(x)
return(x)
}
datos_limpios$hora <- convertir(datos_limpios$hora)
head(datos_limpios)
str(datos_limpios)
datos_numericos <- as.data.frame(apply(datos_limpios, 2, as.numeric))
sapply(datos_numericos, class)
head(datos_numericos)
datos_por_dia <- datos_numericos %>%
group_by(x = cumsum(hora == 0)) %>%   # agrupa datos en función de los valores en la columna x (hora = 0)
mutate(y_group = X) %>%               # mutate crea nuevas columnas por cada grupo de valores y los rellena con los valores de Y (registro de rueda)
tidyr::pivot_wider(names_from = x, values_from = y_group)
head(datos_por_dia)
str(datos_por_dia)
suma_por_dia <- colSums(datos_por_dia, na.rm = TRUE)
suma_por_dia   # Comprobar valores
plot(suma_por_dia)
datos_para_graficos <- as.data.frame(suma_por_dia) # pasa a dataframe
datos_para_graficos
datos_final_v2 <- datos_final[,-1:-2] # elimina columnas por rango; de 1 a 2
datos_final_v2 <- datos_para_graficos[,-1:-2] # elimina columnas por rango; de 1 a 2
datos_final_v2 # Ahora si ya tenemos los datos listos para graficar
datos_para_graficos
rownames(datos_para_graficos)
colnames(datos_para_graficos)
df_final <- datos_para_graficos
df_final_final <-
df_final %>%
filter(!row_number() %in% c(1, 2))
df_final_final <-
df_final %>%
filter(!row_number() %in% c(1, 2))
df_final_final
rownames(df_final_final)
colnames(df_final_final)
ggplot(df_final_final,
aes(x = suma_por_dia))
ggplot(df_final_final,
aes(x = suma_por_dia)) +
geom_bar()
ggplot(df_final_final,
aes(x = suma_por_dia)) +
geom_line()
ggplot(df_final_final,
aes(x = suma_por_dia)) +
geom_histogram()
ggplot(df_final_final,
aes(y = suma_por_dia)) +
geom_histogram()
df_final_final
rownames(df_final_final)
colnames(df_final_final)
ggplot(df_final_final,
aes(y = suma_por_dia)) +
geom_bar()
ggplot(df_final_final,
aes(x = suma_por_dia)) +
geom_point()
ggplot(df_final_final,
aes(x = suma_por_dia)) +
geom_count()
ggplot(df_final_final,
aes(x = suma_por_dia)) +
geom_dotplot()
plot(df_final_final)
suma_por_dia   # Comprobar valores
suma_por_dia <- colSums(datos_por_dia, na.rm = TRUE)
suma_por_dia   # Comprobar valores
plot(suma_por_dia)
plot(df_final_final)
colnames(df_final_final)
dias < c(1:8)
dias <- c(1:8)
dias
rownames(dias)
colnames(dias)
colnames(dias)
colnames(dias)[1] <- "dias"
colnames(dias)
str(dias)
df_final_final$dias = dias
df_final_final
rownames(df_final_final)
colnames(df_final_final)
plot(df_final_final)
ggplot(df_final_final,
aes(x = dias, y = suma_por_dia)) +
geom_dotplot()
ggplot(df_final_final,
aes(x = dias, y = suma_por_dia)) +
geom_bar()
ggplot(df_final_final,
aes(x = dias, y = suma_por_dia)) +
geom_bar()
ggplot(df_final_final,
aes(x = dias)) +
geom_bar()
ggplot(df_final_final,
aes(x = dias, y = suma_por_dia)) +
geom_point()
ggplot(df_final_final,
aes(x = dias, y = suma_por_dia)) +
geom_point() +
geom_line()
ggplot(df_final_final,
aes(x = dias, y = suma_por_dia)) +
geom_point() +
geom_line() +
labs(
title = "Número de vueltas por día",
subtitle = "Madres corredoras",
x = "Días",
y = "Número de vueltas a rueda"
)
d
setwd("C:/Users/Santi/OneDrive - ciencias.unam.mx/31_git/maestria/maestria/90_scripts/rueda_enriquecimiento")
df %>%
read.csv(file = 'registro_por_hora.csv', header = TRUE) %>%
colnames(datos_crudos)[1] <- "hora" %>%
filter(!row_number() %in% c(1))
df %>%
read.csv(file = 'registro_por_hora.csv', header = TRUE) %>%
colnames(datos_crudos)[1] <- "hora"
df --> read.csv(file = 'registro_por_hora.csv', header = TRUE) %>%
df -> read.csv(file = 'registro_por_hora.csv', header = TRUE) %>%
colnames(datos_crudos)[1] <- "hora" %>%
filter(!row_number() %in% c(1))
df -> read.csv(file = 'registro_por_hora.csv', header = TRUE) %>%
colnames(datos_crudos)[1] <- "hora"
df -> read.csv(file = 'registro_por_hora.csv', header = TRUE)
datos_crudos <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
df %>%
colnames(datos_crudos)[1] <- "hora"
df %>%
colnames()[1] <- "hora"
# Importar librerias a utilizar
library(tidyverse)
df %>%
colnames()[1] <- "hora"
df %>%
colnames[1] <- "hora"
df %>%
colnames[1] <- "hora"
df %>% colnames[1] <- "hora"
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
df %>% colnames[1] <- "hora"
df
df %>% colnames(df, 1) <- "hora"
df %>% colnames[1] %>% "hora"
df %>% colnames[1] -> "hora"
