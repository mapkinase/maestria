}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
for (i in 1:nrow(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] > datos$hora[i-1]) {
decrece <- FALSE
}
}
head(datos)
for (i in 1:nrow(datos)) {
head(datos)
head(datos)
head(datos)
exitç
cancel
exit
stop()
stop(TRUE)
datos <- read.csv(file = 'registro_por_hora.csv')
# Para corroborar que los datos están en orden, usar el siguiente comando para ver los datos importados
head(datos)
setwd("C:/Users/Santi/OneDrive - ciencias.unam.mx/31_git/maestria/maestria/90_scripts/rueda_enriquecimiento")
datos <- read.csv(file = 'registro_por_hora.csv')
datos <- read.csv(file = 'registro_por_hora.csv')
datos <- read.csv(file = 'registro_por_hora.csv')
datos <- read.csv(file = 'registro_por_hora.csv')
# Para corroborar que los datos están en orden, usar el siguiente comando para ver los datos importados
head(datos)
# Para corroborar que los datos están en orden, usar el siguiente comando para ver los datos importados
head(datos)
datos <- read.csv(file = 'registro_por_hora.csv')
# Para corroborar que los datos están en orden, usar el siguiente comando para ver los datos importados
head(datos)
# revisar columna a cambiar
colnames(datos)[1]
# cambiar nombre
colnames(datos)[1] <- "hora"
# Revisar
head(datos)
# para esto, lo primero que tenemos que hacer es crear una nueva columna
# esta nueva columna la populamos con la leyenda NA
datos$nuevo_dia <- NA
head(datos)
head(datos)
for (i in 1:nrow(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
for (i in 1:ncol(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
for (i in 1:ncol(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
for (i in 1:ncol(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
for (i in 1:ncol(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
-----------
#In this example code, the sample data frame df has a single column named x containing the values 5, 6, 7, 2, 8, 9, 4, 5, 6, 7, 3, 8, 9. The code first initializes a new column named y and sets all of its values to NA. Then, it iterates through each row of the data frame and checks if the current value in x is smaller than the previous value. If it is, it sets the variable decreasing to true. If the value is not decreasing, it moves the current value to the new column y and sets the value in the original column x to NA. When the value starts increasing again, it sets the variable decreasing to false.
# This code will move all the values in x until it decreases to the new column y, and it will also remove the values that were moved to the new column from the original column x.
------------
if(!exists("datos$hora")){
stop("the column hora does not exist in the dataframe")
}
datos <- read.csv(file = 'registro_por_hora.csv')
# Para corroborar que los datos están en orden, usar el siguiente comando para ver los datos importados
head(datos)
# para esto, lo primero que tenemos que hacer es crear una nueva columna
# esta nueva columna la populamos con la leyenda NA
datos$nuevo_dia <- NA
head(datos)
head(datos)
for (i in 1:nrow(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
-----------
#In this example code, the sample data frame df has a single column named x containing the values 5, 6, 7, 2, 8, 9, 4, 5, 6, 7, 3, 8, 9. The code first initializes a new column named y and sets all of its values to NA. Then, it iterates through each row of the data frame and checks if the current value in x is smaller than the previous value. If it is, it sets the variable decreasing to true. If the value is not decreasing, it moves the current value to the new column y and sets the value in the original column x to NA. When the value starts increasing again, it sets the variable decreasing to false.
# This code will move all the values in x until it decreases to the new column y, and it will also remove the values that were moved to the new column from the original column x.
------------
if(!exists("datos$hora")){
stop("the column hora does not exist in the dataframe")
}
datos <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
# Para corroborar que los datos están en orden, usar el siguiente comando para ver los datos importados
head(datos)
# para esto, lo primero que tenemos que hacer es crear una nueva columna
# esta nueva columna la populamos con la leyenda NA
datos$nuevo_dia <- NA
head(datos)
head(datos)
for (i in 1:nrow(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
-----------
#In this example code, the sample data frame df has a single column named x containing the values 5, 6, 7, 2, 8, 9, 4, 5, 6, 7, 3, 8, 9. The code first initializes a new column named y and sets all of its values to NA. Then, it iterates through each row of the data frame and checks if the current value in x is smaller than the previous value. If it is, it sets the variable decreasing to true. If the value is not decreasing, it moves the current value to the new column y and sets the value in the original column x to NA. When the value starts increasing again, it sets the variable decreasing to false.
# This code will move all the values in x until it decreases to the new column y, and it will also remove the values that were moved to the new column from the original column x.
------------
if(!exists("datos$hora")){
stop("the column hora does not exist in the dataframe")
}
datos <- read.csv(file = 'registro_por_hora.csv', header = FALSE)
# para esto, lo primero que tenemos que hacer es crear una nueva columna
# esta nueva columna la populamos con la leyenda NA
datos$nuevo_dia <- NA
head(datos)
head(datos)
for (i in 1:nrow(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
-----------
#In this example code, the sample data frame df has a single column named x containing the values 5, 6, 7, 2, 8, 9, 4, 5, 6, 7, 3, 8, 9. The code first initializes a new column named y and sets all of its values to NA. Then, it iterates through each row of the data frame and checks if the current value in x is smaller than the previous value. If it is, it sets the variable decreasing to true. If the value is not decreasing, it moves the current value to the new column y and sets the value in the original column x to NA. When the value starts increasing again, it sets the variable decreasing to false.
# This code will move all the values in x until it decreases to the new column y, and it will also remove the values that were moved to the new column from the original column x.
------------
if(!exists("datos$hora")){
stop("the column hora does not exist in the dataframe")
}
datos <- read.csv(file = 'registro_por_hora.csv', header = FALSE)
# Para corroborar que los datos están en orden, usar el siguiente comando para ver los datos importados
head(datos)
datos <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
# Para corroborar que los datos están en orden, usar el siguiente comando para ver los datos importados
head(datos)
# para esto, lo primero que tenemos que hacer es crear una nueva columna
# esta nueva columna la populamos con la leyenda NA
datos$nuevo_dia <- NA
head(datos)
head(datos)
for (i in 1:nrow(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
-----------
#In this example code, the sample data frame df has a single column named x containing the values 5, 6, 7, 2, 8, 9, 4, 5, 6, 7, 3, 8, 9. The code first initializes a new column named y and sets all of its values to NA. Then, it iterates through each row of the data frame and checks if the current value in x is smaller than the previous value. If it is, it sets the variable decreasing to true. If the value is not decreasing, it moves the current value to the new column y and sets the value in the original column x to NA. When the value starts increasing again, it sets the variable decreasing to false.
# This code will move all the values in x until it decreases to the new column y, and it will also remove the values that were moved to the new column from the original column x.
------------
if(!exists("datos$hora")){
stop("the column hora does not exist in the dataframe")
}
View(datos)
View(datos)
# revisar columna a cambiar
colnames(datos)[1]
head(datos)
head(datos)
--------------
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
--------------
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
setwd("C:/Users/Santi/OneDrive - ciencias.unam.mx/31_git/maestria/maestria/90_scripts/rueda_enriquecimiento")
--------------
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
--------------
library(dplyr)
library(dplyr)
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
df <- df %>%
group_by(day = as.Date(time, format = "%Y-%m-%d")) %>%
mutate(day_one = ifelse(time == "00:00", NA, day_one)) %>%
tidyr::pivot_wider(names_from = day, values_from = day_one)
datos <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
# revisar columna a cambiar
colnames(datos)[1]
# para esto, lo primero que tenemos que hacer es crear una nueva columna
# esta nueva columna la populamos con la leyenda NA
datos$nuevo_dia <- NA
head(datos)
decrece <- FALSE
for (i in 1:nrow(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$Çora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
head(datos)
if(!exists("datos$hora")){
stop("the column hora does not exist in the dataframe")
}
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
df <- df %>%
group_by(day = as.Date(time, format = "%Y-%m-%d")) %>%
mutate(day_one = ifelse(time == "00:00", NA, day_one)) %>%
tidyr::pivot_wider(names_from = day, values_from = day_one)
# Revisar
head(datos)
head(df)
df <- df %>%
group_by(day = as.Date(time, format = "%Y-%m-%d")) %>%
mutate(day_one = ifelse(time == "00:00", NA, day_one)) %>%
tidyr::pivot_wider(names_from = day, values_from = day_one)
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
ibrary(dplyr)
df <- df %>%
group_by(x = cumsum(X == 0)) %>%
mutate(y_group = Y) %>%
tidyr::pivot_wider(names_from = x, values_from = y_group)
ibrary(dplyr)
df <- df %>%
group_by(x = cumsum(X == 0)) %>%
mutate(y_group = dia1) %>%
tidyr::pivot_wider(names_from = x, values_from = y_group)
df <- df %>%
group_by(x = cumsum(hora == 0)) %>%
mutate(y_group = dia1) %>%
tidyr::pivot_wider(names_from = x, values_from = y_group)
head(df)
View(df)
View(df)
write.csv(DataFrame Name, "exortado_prueba.csv", row.names=TRUE)
write.csv(df, "exortado_prueba.csv", row.names=TRUE)
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
head(df)
library(dplyr)
df <- df %>%
mutate(x_group = cut(hora,breaks = c(-Inf,0,Inf))) %>%
mutate(y_group = dia1) %>%
tidyr::pivot_wider(names_from = x_group, values_from = y_group)
head(df)
View(df)
View(df)
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
df <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
df <- str(x)
df <- str(hora)
df <- x$hora
df$hora
str(df)
# Revisar la primera columna
df[1]
# como la primera columna es num "df[1], se va a convertir a int
sapply(df[1], as.integer)
str(df)
# como la primera columna es num "df[1], se va a convertir a int
sapply(df[c(1)], as.integer)
str(df)
# como la primera columna es num "df[1], se va a convertir a int
as.integer(as.numeric(df$hora))
str(df)
# como la primera columna es num "df[1], se va a convertir a int
as.integer(as.numeric(df$hora))
# como la primera columna es num "df[1], se va a convertir a int
df$hora = as.integer(as.numeric(df$hora))
str(df)
df <- df %>%
group_by(x = cumsum(hora == 0)) %>%
mutate(y_group = dia1) %>%
tidyr::pivot_wider(names_from = x, values_from = y_group)
head(df)
View(df)
View(df)
datos <- read.csv(file = 'registro_por_hora.csv', header = TRUE)
decrece <- FALSE
for (i in 1:nrow(datos)) {
# Probar si el valor actual decrece
if (i > 1 && datos$hora[i] < datos$hora[i-1]) {
decrece <- TRUE
}
# Revisar si el valor actual decrece y si el previo no es NA
if(decrece && !is.na(datos$hora[i-1])) {
# movel el valor previo a una nueva columna
datos$hora[i-1] <- datos$hora[i-1]
# remover el valor previo de la columna original
datos$hora[i-1] <- NA
}
# revisar si valor actual no decrece
if (!decrece) {
# mover valor actual a nueva columna
datos$nuevo_dia[i] <- datos$hora[i]
# remover valor actual de columna original
datos$hora[i] <- NA
}
# revisar si valor actual no decrece
if (datos$hora[i] >= datos$hora[i-1]) {
decrece <- FALSE
}
}
