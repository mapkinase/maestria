library(tidiverse)
library(tidiverse)
library(tidyverse)
library(tidyverse)
datos_crudos <- read.csv("datos_crudos_any_maze.csv")
datos_crudos <- read.csv("water_maze/datos_crudos_any_maze.csv")
colnames(datos_crudos)
library(stringr)
library(stringr)
library(stringr)
library(tidyverse)
datos_crudos <- read.csv("water_maze/datos_crudos_any_maze.csv")
colnames(datos_crudos)
library(stringr)
entrenamientos <- datos_crudos |>
group_by(Treatment, Stage) |>
filter(str_detect(Stage, "entrenamiento")) |> # selecciona rows que en la columna tengan el valor de entrenamiento
filter(!str_detect(Stage, "pre")) |> # elimina columnas que en stage tengan pre (esos datos no me sirven)
select(Treatment, # selecciona columnas con variables de interes
Stage,
Duration,
Distance,
Mean.speed,
Annulus.NE...path.efficiency.to.entry,
Annulus.NE...CIPL,
Annulus.SW...latency.to.first.entry,
Annulus.SW...CIPL)
entrenamientos <- datos_crudos |>
group_by(Treatment, Stage) |>
filter(str_detect(Stage, "entrenamiento")) |> # selecciona rows que en la columna tengan el valor de entrenamiento
filter(!str_detect(Stage, "pre")) |> # elimina columnas que en stage tengan pre (esos datos no me sirven)
select(Treatment, # selecciona columnas con variables de interes
Stage,
Duration,
Distance,
Mean.speed,
Annulus.NE...path.efficiency.to.entry,
Annulus.NE...CIPL,
Annulus.SW...latency.to.first.entry,
Annulus.SW...CIPL)
entrenamientos <- datos_crudos |>
group_by(Treatment, Stage) |>
filter(str_detect(Stage, "entrenamiento")) |> # selecciona rows que en la columna tengan el valor de entrenamiento
filter(!str_detect(Stage, "pre")) |> # elimina columnas que en stage tengan pre (esos datos no me sirven)
select(Treatment, # selecciona columnas con variables de interes
Stage,
Duration,
Distance,
Mean.speed,
Annulus.NE...path.efficiency.to.entry,
Annulus.NE...CIPL,
Annulus.SW...latency.to.first.entry,
Annulus.SW...CIPL)
head(entrenamientos)
library(tidyverse)
datos_crudos <- read.csv("water_maze/datos_crudos_any_maze.csv")
colnames(datos_crudos)
library(stringr)
entrenamientos <- datos_crudos |>
group_by(Treatment, Stage) |>
filter(str_detect(Stage, "entrenamiento")) |> # selecciona rows que en la columna tengan el valor de entrenamiento
filter(!str_detect(Stage, "pre")) |> # elimina columnas que en stage tengan pre (esos datos no me sirven)
select(Treatment, # selecciona columnas con variables de interes
Stage,
Duration,
Distance,
Mean.speed,
Annulus.NE...path.efficiency.to.entry,
Annulus.NE...CIPL,
Annulus.SW...latency.to.first.entry,
Annulus.SW...CIPL)
head(entrenamientos)
library(tidyverse)
datos_crudos <- read.csv("water_maze/datos_crudos_any_maze.csv")
colnames(datos_crudos)
library(stringr)
entrenamientos <- datos_crudos |>
group_by(Treatment, Stage) |>
filter(str_detect(Stage, "entrenamiento")) |> # selecciona rows que en la columna tengan el valor de entrenamiento
filter(!str_detect(Stage, "pre")) |> # elimina columnas que en stage tengan pre (esos datos no me sirven)
select(Treatment, # selecciona columnas con variables de interes
Stage,
Duration,
Distance,
Mean.speed,
Annulus.NE...path.efficiency.to.entry,
Annulus.NE...CIPL,
Annulus.SW...latency.to.first.entry,
Annulus.SW...CIPL)
head(entrenamientos)
entrenamientos_estadisticos <- entrenamientos |>
group_by(Treatment, Stage) %>%
dplyr::summarise( # usamos dplyr::summarise para evitar conflictos en paquetes
# Latencia
N_latencia  = sum(!is.na(Duration)), # Calcula la N
media_latencia = mean(Duration, na.rm=TRUE), # calcula la media
sd_latencia = sd(Duration, na.rm=TRUE), # calcula la SD
se_latencia = sd_latencia / sqrt(N_latencia), # calcula SE
# Distancia
N_distancia  = sum(!is.na(Distance)),
media_distancia = mean(Distance, na.rm=TRUE),
sd_distancia = sd(Distance, na.rm=TRUE),
se_distancia = sd_distancia / sqrt(N_distancia),
# velocidad promedio
N_velocidad  = sum(!is.na(Mean.speed)),
media_velocidad = mean(Mean.speed, na.rm=TRUE),
sd_velocidad = sd(Mean.speed, na.rm=TRUE),
se_velocidad = sd_velocidad / sqrt(N_velocidad),
# eficiencia annulus NE
N_eficiencia_NE  = sum(!is.na(Annulus.NE...path.efficiency.to.entry)),
media_eficiencia_NE = mean(Annulus.NE...path.efficiency.to.entry, na.rm=TRUE),
sd_eficiencia_NE = sd(Annulus.NE...path.efficiency.to.entry, na.rm=TRUE),
se_eficiencia_NE = sd_eficiencia_NE / sqrt(N_eficiencia_NE),
# CIPL annulus NE
N_cipl_NE  = sum(!is.na(Annulus.NE...CIPL)),
media_cipl_NE = mean(Annulus.NE...CIPL, na.rm=TRUE),
sd_cipl_NE = sd(Annulus.NE...CIPL, na.rm=TRUE),
se_cipl_NE = sd_cipl_NE / sqrt(N_cipl_NE),
# eficiencia annulus SO
N_eficiencia_SO  = sum(!is.na(Annulus.SW...CIPL)),
media_eficiencia_SO = mean(Annulus.SW...CIPL, na.rm=TRUE),
sd_eficiencia_SO = sd(Annulus.SW...CIPL, na.rm=TRUE),
se_eficiencia_SO = sd_eficiencia_SO / sqrt(N_eficiencia_SO),
# CIPL annulus SO
N_cipl_SO  = sum(!is.na(Annulus.SW...CIPL)),
media_cipl_SO = mean(Annulus.SW...CIPL, na.rm=TRUE),
sd_cipl_SO = sd(Annulus.SW...CIPL, na.rm=TRUE),
se_cipl_SO = sd_cipl_SO / sqrt(N_cipl_SO)
)
head(entrenamientos_estadisticos)
entrenamientos_estadisticos <- entrenamientos |>
group_by(Treatment, Stage) %>%
dplyr::summarise( # usamos dplyr::summarise para evitar conflictos en paquetes
# Latencia
N_latencia  = sum(!is.na(Duration)), # Calcula la N
media_latencia = mean(Duration, na.rm=TRUE), # calcula la media
sd_latencia = sd(Duration, na.rm=TRUE), # calcula la SD
se_latencia = sd_latencia / sqrt(N_latencia), # calcula SE
# Distancia
N_distancia  = sum(!is.na(Distance)),
media_distancia = mean(Distance, na.rm=TRUE),
sd_distancia = sd(Distance, na.rm=TRUE),
se_distancia = sd_distancia / sqrt(N_distancia),
# velocidad promedio
N_velocidad  = sum(!is.na(Mean.speed)),
media_velocidad = mean(Mean.speed, na.rm=TRUE),
sd_velocidad = sd(Mean.speed, na.rm=TRUE),
se_velocidad = sd_velocidad / sqrt(N_velocidad),
# eficiencia annulus NE
N_eficiencia_NE  = sum(!is.na(Annulus.NE...path.efficiency.to.entry)),
media_eficiencia_NE = mean(Annulus.NE...path.efficiency.to.entry, na.rm=TRUE),
sd_eficiencia_NE = sd(Annulus.NE...path.efficiency.to.entry, na.rm=TRUE),
se_eficiencia_NE = sd_eficiencia_NE / sqrt(N_eficiencia_NE),
# CIPL annulus NE
N_cipl_NE  = sum(!is.na(Annulus.NE...CIPL)),
media_cipl_NE = mean(Annulus.NE...CIPL, na.rm=TRUE),
sd_cipl_NE = sd(Annulus.NE...CIPL, na.rm=TRUE),
se_cipl_NE = sd_cipl_NE / sqrt(N_cipl_NE),
# eficiencia annulus SO
N_eficiencia_SO  = sum(!is.na(Annulus.SW...CIPL)),
media_eficiencia_SO = mean(Annulus.SW...CIPL, na.rm=TRUE),
sd_eficiencia_SO = sd(Annulus.SW...CIPL, na.rm=TRUE),
se_eficiencia_SO = sd_eficiencia_SO / sqrt(N_eficiencia_SO),
# CIPL annulus SO
N_cipl_SO  = sum(!is.na(Annulus.SW...CIPL)),
media_cipl_SO = mean(Annulus.SW...CIPL, na.rm=TRUE),
sd_cipl_SO = sd(Annulus.SW...CIPL, na.rm=TRUE),
se_cipl_SO = sd_cipl_SO / sqrt(N_cipl_SO)
)
head(entrenamientos_estadisticos)
colnames(entrenamientos_estadisticos)
ggplot(
data = entrenamientos_estadisticos,
aes(
x = Stage,
y = media_latencia,
colour = Treatment)) +
geom_point(aes(
colour = Treatment),
alpha = 1,
size = 4) +
geom_line(aes(
group = Treatment)) +
scale_color_manual(
values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(
ymin = media_latencia - se_latencia,
ymax = media_latencia + se_latencia), width = .1, size = 1) +
labs(
title = "Latencia en entrenamienos de Water Maze",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n Se muestra con SEM",
x = "Día de entrenamiento",
y = "Latencia promedio (s)"
) +
theme(
plot.margin = unit(c(2,2,2,2), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 13, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(1,1),
legend.text = element_text(size=10),
legend.background = element_rect(color="black")) +
geom_hline(yintercept = 17, linetype = "dotted", color = "red", size = .6) +
scale_x_discrete(labels=c('1', '2', '3', '4', '1-Reversa', '2-Reversa'))
ggplot(
data = entrenamientos_estadisticos,
aes(
x = Stage,
y = media_latencia,
colour = Treatment)) +
geom_point(aes(
colour = Treatment),
alpha = 1,
size = 4) +
geom_line(aes(
group = Treatment)) +
scale_color_manual(
values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(
ymin = media_latencia - se_latencia,
ymax = media_latencia + se_latencia), width = .1, size = 1) +
labs(
title = "Latencia en entrenamienos de Water Maze",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n Se muestra con SEM",
x = "Día de entrenamiento",
y = "Latencia promedio (s)"
) +
theme(
plot.margin = unit(c(2,2,2,2), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 13, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(1,1),
legend.text = element_text(size=10),
legend.background = element_rect(color="black")) +
geom_hline(yintercept = 17, linetype = "dotted", color = "red", size = .6) +
scale_x_discrete(labels=c('1', '2', '3', '4', '1-Reversa', '2-Reversa'))
setwd("C:/Users/Santi/OneDrive - ciencias.unam.mx/31_git/maestria/maestria/90_scripts/experimento_analisis_limpio/experimentos_analisis_limpio")
ggplot(
data = entrenamientos_estadisticos,
aes(
x = Stage,
y = media_latencia,
colour = Treatment)) +
geom_point(aes(
colour = Treatment),
alpha = 1,
size = 4) +
geom_line(aes(
group = Treatment)) +
scale_color_manual(
values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(
ymin = media_latencia - se_latencia,
ymax = media_latencia + se_latencia), width = .1, size = 1) +
labs(
title = "Latencia en entrenamienos de Water Maze",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n Se muestra con SEM",
x = "Día de entrenamiento",
y = "Latencia promedio (s)"
) +
theme(
plot.margin = unit(c(2,2,2,2), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 13, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(1,1),
legend.text = element_text(size=10),
legend.background = element_rect(color="black")) +
geom_hline(yintercept = 17, linetype = "dotted", color = "red", size = .6) +
scale_x_discrete(labels=c('1', '2', '3', '4', '1-Reversa', '2-Reversa'))
