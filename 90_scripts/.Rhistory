se_cruces_al_centro = sd_cruces_al_centro / sqrt(N_cruces_al_centro)),
# Tiempo en movimiento
media_tiempo_en_movimiento = mean(Time.mobile, na.rm=TRUE),
sd_tiempo_en_movimiento = sd(Time.mobile, na.rm=TRUE),
N_tiempo_en_movimiento = sum(!is.na(Time.mobile)),
se_tiempo_en_movimiento = (sd_tiempo_en_movimiento/(sqrt(N_tiempo_en_movimiento))),
# Velocidad promedio
media_velocidad_promedio = mean(Mean.speed, na.rm=TRUE),
sd_velocidad_promedio = sd(Mean.speed, na.rm=TRUE),
N_velocidad_promedio = sum(!is.na(Mean.speed)),
se_velocidad_promedio = (sd_velocidad_promedio/(sqrt(N_velocidad_promedio)))
)
View(laberinto_cruz_estadisticos)
View(laberinto_cruz_estadisticos)
df <- read.csv("campo_abierto/resultados_raw_campo_abierto/resultados_raw_campo_abierto.csv")
laberinto_cruz_estadisticos <- df |>
group_by(Treatment, Tratamiento) %>%
dplyr::summarise(
# Distancia Total
N_distancia  = sum(!is.na(Distance)),
media_distancia = mean(Distance, na.rm=TRUE),
sd_distancia = sd(Distance, na.rm=TRUE),
se_distancia = sd_distancia / sqrt(N_distancia),
# Tiempo periferia
N_tiempo_periferia  = sum(!is.na(Periferia...time)),
media_tiempo_periferia = mean(Periferia...time, na.rm=TRUE),
sd_tiempo_periferia = sd(Periferia...time, na.rm=TRUE),
se_tiempo_periferia = sd_tiempo_periferia / sqrt(N_tiempo_periferia),
# Tiempo medio
N_tiempo_medio  = sum(!is.na(Medio...time)),
media_tiempo_medio = mean(Medio...time, na.rm=TRUE),
sd_tiempo_medio = sd(Medio...time, na.rm=TRUE),
se_tiempo_medio = sd_tiempo_medio / sqrt(N_tiempo_medio),
# Tiempo en centro
N_tiempo_centro  = sum(!is.na(Centro...time),
media_tiempo_centro = mean(Centro...time, na.rm=TRUE),
sd_tiempo_centro = sd(Centro...time, na.rm=TRUE),
se_tiempo_centro = sd_tiempo_centro / sqrt(N_tiempo_centro),
# Número de cruces
N_cruces_al_centro  = sum(!is.na(Centro...Number.line.crossings)),
media_cruces_al_centro = mean(Centro...Number.line.crossings, na.rm=TRUE),
sd_cruces_al_centro = sd(Centro...Number.line.crossings, na.rm=TRUE),
se_cruces_al_centro = sd_cruces_al_centro / sqrt(N_cruces_al_centro)),
# Tiempo en movimiento
media_tiempo_en_movimiento = mean(Time.mobile, na.rm=TRUE),
sd_tiempo_en_movimiento = sd(Time.mobile, na.rm=TRUE),
N_tiempo_en_movimiento = sum(!is.na(Time.mobile)),
se_tiempo_en_movimiento = (sd_tiempo_en_movimiento/(sqrt(N_tiempo_en_movimiento))),
# Velocidad promedio
media_velocidad_promedio = mean(Mean.speed, na.rm=TRUE),
sd_velocidad_promedio = sd(Mean.speed, na.rm=TRUE),
N_velocidad_promedio = sum(!is.na(Mean.speed)),
se_velocidad_promedio = (sd_velocidad_promedio/(sqrt(N_velocidad_promedio)))
)
View(laberinto_cruz_estadisticos)
View(laberinto_cruz_estadisticos)
laberinto_cruz_estadisticos <- df |>
group_by(Treatment, Tratamiento) %>%
dplyr::summarise(
# Distancia Total
N_distancia  = sum(!is.na(Distance)),
media_distancia = mean(Distance, na.rm=TRUE),
sd_distancia = sd(Distance, na.rm=TRUE),
se_distancia = sd_distancia / sqrt(N_distancia),
# Tiempo periferia
N_tiempo_periferia  = sum(!is.na(Periferia...time)),
media_tiempo_periferia = mean(Periferia...time, na.rm=TRUE),
sd_tiempo_periferia = sd(Periferia...time, na.rm=TRUE),
se_tiempo_periferia = sd_tiempo_periferia / sqrt(N_tiempo_periferia),
# Tiempo medio
N_tiempo_medio  = sum(!is.na(Medio...time)),
media_tiempo_medio = mean(Medio...time, na.rm=TRUE),
sd_tiempo_medio = sd(Medio...time, na.rm=TRUE),
se_tiempo_medio = sd_tiempo_medio / sqrt(N_tiempo_medio),
# Tiempo en centro
N_tiempo_centro  = sum(!is.na(Centro...time),
media_tiempo_centro = mean(Centro...time, na.rm=TRUE),
sd_tiempo_centro = sd(Centro...time, na.rm=TRUE),
se_tiempo_centro = sd_tiempo_centro / sqrt(N_tiempo_centro),
# Número de cruces
N_cruces_al_centro  = sum(!is.na(Centro...Number.line.crossings)),
media_cruces_al_centro = mean(Centro...Number.line.crossings, na.rm=TRUE),
sd_cruces_al_centro = sd(Centro...Number.line.crossings, na.rm=TRUE),
se_cruces_al_centro = sd_cruces_al_centro / sqrt(N_cruces_al_centro)),
# Tiempo en movimiento
N_tiempo_en_movimiento = sum(!is.na(Time.mobile)),
media_tiempo_en_movimiento = mean(Time.mobile, na.rm=TRUE),
sd_tiempo_en_movimiento = sd(Time.mobile, na.rm=TRUE),
se_tiempo_en_movimiento = (sd_tiempo_en_movimiento/(sqrt(N_tiempo_en_movimiento))),
# Velocidad promedio
N_velocidad_promedio = sum(!is.na(Mean.speed)),
media_velocidad_promedio = mean(Mean.speed, na.rm=TRUE),
sd_velocidad_promedio = sd(Mean.speed, na.rm=TRUE),
se_velocidad_promedio = (sd_velocidad_promedio/(sqrt(N_velocidad_promedio)))
)
View(laberinto_cruz_estadisticos)
View(laberinto_cruz_estadisticos)
View(laberinto_cruz_estadisticos)
View(laberinto_cruz_estadisticos)
laberinto_cruz_estadisticos <- df |>
group_by(Treatment, Tratamiento) %>%
dplyr::summarise(
# Distancia Total
N_distancia  = sum(!is.na(Distance)),
media_distancia = mean(Distance, na.rm=TRUE),
sd_distancia = sd(Distance, na.rm=TRUE),
se_distancia = sd_distancia / sqrt(N_distancia),
# Tiempo periferia
N_tiempo_periferia  = sum(!is.na(Periferia...time)),
media_tiempo_periferia = mean(Periferia...time, na.rm=TRUE),
sd_tiempo_periferia = sd(Periferia...time, na.rm=TRUE),
se_tiempo_periferia = sd_tiempo_periferia / sqrt(N_tiempo_periferia),
# Tiempo medio
N_tiempo_medio  = sum(!is.na(Medio...time)),
media_tiempo_medio = mean(Medio...time, na.rm=TRUE),
sd_tiempo_medio = sd(Medio...time, na.rm=TRUE),
se_tiempo_medio = sd_tiempo_medio / sqrt(N_tiempo_medio),
# Tiempo en centro
N_tiempo_centro  = sum(!is.na(Centro...time),
media_tiempo_centro = mean(Centro...time, na.rm=TRUE),
sd_tiempo_centro = sd(Centro...time, na.rm=TRUE),
se_tiempo_centro = sd_tiempo_centro / sqrt(N_tiempo_centro),
# Número de cruces
N_cruces_al_centro  = sum(!is.na(Centro...Number.line.crossings)),
media_cruces_al_centro = mean(Centro...Number.line.crossings, na.rm=TRUE),
sd_cruces_al_centro = sd(Centro...Number.line.crossings, na.rm=TRUE),
se_cruces_al_centro = sd_cruces_al_centro / sqrt(N_cruces_al_centro)),
# Tiempo en movimiento
N_tiempo_en_movimiento = sum(!is.na(Time.mobile)),
media_tiempo_en_movimiento = mean(Time.mobile, na.rm=TRUE),
sd_tiempo_en_movimiento = sd(Time.mobile, na.rm=TRUE),
se_tiempo_en_movimiento = (sd_tiempo_en_movimiento/(sqrt(N_tiempo_en_movimiento))),
# Velocidad promedio
N_velocidad_promedio = sum(!is.na(Mean.speed)),
media_velocidad_promedio = mean(Mean.speed, na.rm=TRUE),
sd_velocidad_promedio = sd(Mean.speed, na.rm=TRUE),
se_velocidad_promedio = (sd_velocidad_promedio/(sqrt(N_velocidad_promedio)))
)
View(laberinto_cruz_estadisticos)
View(laberinto_cruz_estadisticos)
laberinto_cruz_estadisticos <- df |>
group_by(Treatment, Tratamiento) %>%
dplyr::summarise(
# Distancia Total
N_distancia  = sum(!is.na(Distance)),
media_distancia = mean(Distance, na.rm=TRUE),
sd_distancia = sd(Distance, na.rm=TRUE),
se_distancia = sd_distancia / sqrt(N_distancia),
# Tiempo periferia
N_tiempo_periferia  = sum(!is.na(Periferia...time)),
media_tiempo_periferia = mean(Periferia...time, na.rm=TRUE),
sd_tiempo_periferia = sd(Periferia...time, na.rm=TRUE),
se_tiempo_periferia = sd_tiempo_periferia / sqrt(N_tiempo_periferia),
# Tiempo medio
N_tiempo_medio  = sum(!is.na(Medio...time)),
media_tiempo_medio = mean(Medio...time, na.rm=TRUE),
sd_tiempo_medio = sd(Medio...time, na.rm=TRUE),
se_tiempo_medio = sd_tiempo_medio / sqrt(N_tiempo_medio),
# Tiempo en centro
# Número de cruces
N_cruces_al_centro  = sum(!is.na(Centro...Number.line.crossings)),
media_cruces_al_centro = mean(Centro...Number.line.crossings, na.rm=TRUE),
sd_cruces_al_centro = sd(Centro...Number.line.crossings, na.rm=TRUE),
se_cruces_al_centro = sd_cruces_al_centro / sqrt(N_cruces_al_centro)),
laberinto_cruz_estadisticos <- df |>
group_by(Treatment, Tratamiento) %>%
dplyr::summarise(
# Distancia Total
N_distancia  = sum(!is.na(Distance)),
media_distancia = mean(Distance, na.rm=TRUE),
sd_distancia = sd(Distance, na.rm=TRUE),
se_distancia = sd_distancia / sqrt(N_distancia),
# Tiempo periferia
N_tiempo_periferia  = sum(!is.na(Periferia...time)),
media_tiempo_periferia = mean(Periferia...time, na.rm=TRUE),
sd_tiempo_periferia = sd(Periferia...time, na.rm=TRUE),
se_tiempo_periferia = sd_tiempo_periferia / sqrt(N_tiempo_periferia),
# Tiempo medio
N_tiempo_medio  = sum(!is.na(Medio...time)),
media_tiempo_medio = mean(Medio...time, na.rm=TRUE),
sd_tiempo_medio = sd(Medio...time, na.rm=TRUE),
se_tiempo_medio = sd_tiempo_medio / sqrt(N_tiempo_medio),
# Tiempo en centro
N_tiempo_centro  = sum(!is.na(Centro...time)),
media_tiempo_centro = mean(Centro...time, na.rm=TRUE),
sd_tiempo_centro = sd(Centro...time, na.rm=TRUE),
se_tiempo_centro = sd_tiempo_centro / sqrt(N_tiempo_centro),
# Número de cruces
N_cruces_al_centro  = sum(!is.na(Centro...Number.line.crossings)),
media_cruces_al_centro = mean(Centro...Number.line.crossings, na.rm=TRUE),
sd_cruces_al_centro = sd(Centro...Number.line.crossings, na.rm=TRUE),
se_cruces_al_centro = sd_cruces_al_centro / sqrt(N_cruces_al_centro),
# Tiempo en movimiento
N_tiempo_en_movimiento = sum(!is.na(Time.mobile)),
media_tiempo_en_movimiento = mean(Time.mobile, na.rm=TRUE),
sd_tiempo_en_movimiento = sd(Time.mobile, na.rm=TRUE),
se_tiempo_en_movimiento = sd_tiempo_en_movimiento/sqrt(N_tiempo_en_movimiento),
# Velocidad promedio
N_velocidad_promedio = sum(!is.na(Mean.speed)),
media_velocidad_promedio = mean(Mean.speed, na.rm=TRUE),
sd_velocidad_promedio = sd(Mean.speed, na.rm=TRUE),
se_velocidad_promedio = sd_velocidad_promedio/sqrt(N_velocidad_promedio)
)
View(laberinto_cruz_estadisticos)
View(laberinto_cruz_estadisticos)
ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_distancia, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_distancia - se_distancia, ymax = media_distancia + se_distancia), width = .1, size = 1) +
scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))+
#  Labelling as desired
labs(
title = "Distancia Total recorrida",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n SEM",
x = "Tratamiento",
y = "Distancia (m)"
) +
theme(
plot.margin = unit(c(1,1,1,1), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.8, 0.9),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
df <- read.csv("campo_abierto/resultados_raw_campo_abierto/resultados_raw_campo_abierto.csv")
df[!complete.cases(df), ] # Ver si tenemos datos con NA
# Sacar SD, media, etc
## fuente https://www.r-bloggers.com/2014/03/using-r-quickly-calculating-summary-statistics-with-dplyr/:
# Estadísticos
laberinto_cruz_estadisticos <- df |>
group_by(Treatment, Tratamiento) %>%
dplyr::summarise(
# Distancia Total
N_distancia  = sum(!is.na(Distance)),
media_distancia = mean(Distance, na.rm=TRUE),
sd_distancia = sd(Distance, na.rm=TRUE),
se_distancia = sd_distancia / sqrt(N_distancia),
# Tiempo periferia
N_tiempo_periferia  = sum(!is.na(Periferia...time)),
media_tiempo_periferia = mean(Periferia...time, na.rm=TRUE),
sd_tiempo_periferia = sd(Periferia...time, na.rm=TRUE),
se_tiempo_periferia = sd_tiempo_periferia / sqrt(N_tiempo_periferia),
# Tiempo medio
N_tiempo_medio  = sum(!is.na(Medio...time)),
media_tiempo_medio = mean(Medio...time, na.rm=TRUE),
sd_tiempo_medio = sd(Medio...time, na.rm=TRUE),
se_tiempo_medio = sd_tiempo_medio / sqrt(N_tiempo_medio),
# Tiempo en centro
N_tiempo_centro  = sum(!is.na(Centro...time)),
media_tiempo_centro = mean(Centro...time, na.rm=TRUE),
sd_tiempo_centro = sd(Centro...time, na.rm=TRUE),
se_tiempo_centro = sd_tiempo_centro / sqrt(N_tiempo_centro),
# Número de cruces
N_cruces_al_centro  = sum(!is.na(Centro...Number.line.crossings)),
media_cruces_al_centro = mean(Centro...Number.line.crossings, na.rm=TRUE),
sd_cruces_al_centro = sd(Centro...Number.line.crossings, na.rm=TRUE),
se_cruces_al_centro = sd_cruces_al_centro / sqrt(N_cruces_al_centro),
# Tiempo en movimiento
N_tiempo_en_movimiento = sum(!is.na(Time.mobile)),
media_tiempo_en_movimiento = mean(Time.mobile, na.rm=TRUE),
sd_tiempo_en_movimiento = sd(Time.mobile, na.rm=TRUE),
se_tiempo_en_movimiento = sd_tiempo_en_movimiento/sqrt(N_tiempo_en_movimiento),
# Velocidad promedio
N_velocidad_promedio = sum(!is.na(Mean.speed)),
media_velocidad_promedio = mean(Mean.speed, na.rm=TRUE),
sd_velocidad_promedio = sd(Mean.speed, na.rm=TRUE),
se_velocidad_promedio = sd_velocidad_promedio/sqrt(N_velocidad_promedio)
)
### distancia ----
distancia <- ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_distancia, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_distancia - se_distancia, ymax = media_distancia + se_distancia), width = .1, size = 1) +
scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))+
#  Labelling as desired
labs(
title = "Distancia Total recorrida",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n SEM",
x = "Tratamiento",
y = "Distancia (m)"
) +
theme(
plot.margin = unit(c(1,1,1,1), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.8, 0.9),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
# + geom_signif(comparisons = list(c('pre-cums', 'postcums')), map_signif_level = TRUE)
### tiempo en movimiento media_tiempo_en_movimiento  ----
tiempo_movimiento <- ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_tiempo_en_movimiento, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_tiempo_en_movimiento - se_tiempo_en_movimiento, ymax = media_tiempo_en_movimiento + se_tiempo_en_movimiento), width = .1, size = 1) +
#  Labelling as desired
labs(
title = "Tiempo en Movimiento",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n SEM",
x = "Tratamiento",
y = "Tiempo de movilidad (s)"
) +
theme(
plot.margin = unit(c(2,2,2,2), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.7, 1.2),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
#   scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))+
### latencia_primera_inmovilidad ------
latencia_inmovilidad <- ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_latencia_primera_inmovilidad, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_latencia_primera_inmovilidad - se_latencia_primera_inmovilidad, ymax = media_latencia_primera_inmovilidad + se_latencia_primera_inmovilidad), width = .1, size = 1) +
#  Labelling as desired
labs(
title = "Latencia a primera inmovilidad",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox]",
x = "Tratamiento",
y = "Latencia a inmovilidad (s)"
) +
theme(
plot.margin = unit(c(1,1,1,1), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.8, 0.9),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
#   + scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))
### velocidad_promedio -----
velocidad <- ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_velocidad_promedio, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_velocidad_promedio - se_velocidad_promedio, ymax = media_velocidad_promedio + se_velocidad_promedio), width = .1, size = 1) +
#  Labelling as desired
labs(
title = "Velocidad promedio",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n SEM",
x = "Tratamiento",
y = "Velocidad (m/s)"
) +
theme(
plot.margin = unit(c(1,1,1,1), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.8, 0.9),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
#   + scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))
### tiempo_periferia -------
tiempo_periferia <- ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_tiempo_periferia, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_tiempo_periferia - se_tiempo_periferia, ymax = media_tiempo_periferia + se_tiempo_periferia), width = .1, size = 1) +
#  Labelling as desired
labs(
title = "Tiempo en periferia",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n SEM",
x = "Tratamiento",
y = "Tiempo (s)"
) +
theme(
plot.margin = unit(c(1,1,1,1), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.8, 1.13),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
#   + scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))
# tiempo_medio
tiempo_medio <- ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_tiempo_medio, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_tiempo_medio - se_tiempo_medio, ymax = media_tiempo_medio + se_tiempo_medio), width = .1, size = 1) +
#  Labelling as desired
labs(
title = "Tiempo en Medio",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n SEM",
x = "Tratamiento",
y = "Tiempo (s)"
) +
theme(
plot.margin = unit(c(1,1,1,1), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.8, 0.9),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
#   + scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))
### tiempo_centro -------
tiempo_centro <- ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_tiempo_centro, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_tiempo_centro - se_tiempo_centro, ymax = media_tiempo_centro + se_tiempo_centro), width = .1, size = 1) +
#  Labelling as desired
labs(
title = "Tiempo en Centro",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n SEM",
x = "Tratamiento",
y = "Tiempo (s)"
) +
theme(
plot.margin = unit(c(1,1,1,1), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.8, 1.12),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
#   + scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))
### cruces_al_centro --------
cruces_centro <- ggplot(data = laberinto_cruz_estadisticos, aes(x = reorder(Treatment, desc(Treatment)), y = media_cruces_al_centro, group = Tratamiento,colour = Tratamiento)) +
geom_line(aes(colour = Tratamiento), alpha = 1, size = 2) +
geom_point(aes(colour = Tratamiento), alpha = 1, size = 4) +
scale_color_manual(values = c("#ff1493", "#4c00ff")) +
geom_errorbar(aes(ymin = media_cruces_al_centro - se_cruces_al_centro, ymax = media_cruces_al_centro + se_cruces_al_centro), width = .1, size = 1) +
#  Labelling as desired
labs(
title = "Cruces al centro",
subtitle = "Fluoxetina Grupo 1",
caption = "n = 7  [CUMS_ctrl] y n = 8 [CUMS_fluox] \n SEM",
x = "Tratamiento",
y = "Número de Cruces"
) +
theme(
plot.margin = unit(c(1,1,1,1), "cm"),
panel.background = element_blank(),
axis.line = element_line(color = "#1209c8"),
axis.title = element_text(size=22, color="black",
face="bold"),
axis.text = element_text(size = 22, color = "black"),
axis.text.y = element_text(size=17),
axis.ticks.x = element_blank(),
axis.text.x = element_text(margin = margin(t=10)),
axis.title.y=element_text(margin = margin(r=10)),
legend.position = c(.8, 1.13),
legend.text = element_text(size=20),
legend.background = element_rect(color="black"))
#   + scale_y_continuous(expand = expansion(0), limits = c(30, 70), breaks = seq(30,70,5))
multiplot(distancia,velocidad,tiempo_movimiento, cols = 2)
multiplot(tiempo_periferia, tiempo_medio, tiempo_centro, cruces_centro, cols = 2)
